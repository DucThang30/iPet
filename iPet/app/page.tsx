"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { User, Plus } from "lucide-react"

// Components
import Header from "@/components/Header"
import Footer from "@/components/Footer"
import ChatBot from "@/components/ChatBot"
import ProductDetailModal from "@/components/ProductDetailModal"
import StoreDetailModal from "@/components/StoreDetailModal"

// Views
import HomeView from "@/views/HomeView"
import ProductsView from "@/views/ProductsView"
import StoresView from "@/views/StoresView"

// Data
import { categories, products, stores } from "@/data/mockData"

export default function iPetMarketplace() {
  const [currentView, setCurrentView] = useState("home")
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  // Th√™m state cho cart v√† wishlist
  const [cartItems, setCartItems] = useState([])
  const [wishlistItems, setWishlistItems] = useState([])
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [selectedProduct, setSelectedProduct] = useState(null)
  const [selectedStore, setSelectedStore] = useState(null)
  const [viewMode, setViewMode] = useState("grid")

  // Th√™m c√°c h√†m x·ª≠ l√Ω
  const handleAddToCart = (product) => {
    const existingItem = cartItems.find((item) => item.id === product.id)
    if (existingItem) {
      setCartItems(cartItems.map((item) => (item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item)))
    } else {
      setCartItems([...cartItems, { ...product, quantity: 1 }])
    }
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    alert(`ƒê√£ th√™m ${product.name} v√†o gi·ªè h√†ng!`)
  }

  const handleAddToWishlist = (product) => {
    const isInWishlist = wishlistItems.find((item) => item.id === product.id)
    if (isInWishlist) {
      setWishlistItems(wishlistItems.filter((item) => item.id !== product.id))
      alert(`ƒê√£ x√≥a ${product.name} kh·ªèi danh s√°ch y√™u th√≠ch!`)
    } else {
      setWishlistItems([...wishlistItems, product])
      alert(`ƒê√£ th√™m ${product.name} v√†o danh s√°ch y√™u th√≠ch!`)
    }
  }

  const handleSearch = (query) => {
    setSearchQuery(query)
    setCurrentView("products")
  }

  const handleCategoryFilter = (category) => {
    setSelectedCategory(category)
    setCurrentView("products")
  }

  // L·ªçc s·∫£n ph·∫©m theo t√¨m ki·∫øm v√† danh m·ª•c
  const filteredProducts = products.filter((product) => {
    const matchesSearch =
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = selectedCategory === "all" || product.category === selectedCategory
    return matchesSearch && matchesCategory
  })

  // Login View
  const LoginView = () => (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50 py-12">
      <div className="max-w-md w-full mx-4">
        <Card className="shadow-xl">
          <CardHeader className="text-center pb-2">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-white font-bold text-2xl">üêæ</span>
            </div>
            <CardTitle className="text-2xl">Ch√†o M·ª´ng ƒê·∫øn iPet</CardTitle>
            <p className="text-gray-600">ƒêƒÉng nh·∫≠p ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß</p>
          </CardHeader>
          <CardContent className="space-y-4">
            <Input placeholder="Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i" className="h-12" />
            <Input type="password" placeholder="M·∫≠t kh·∫©u" className="h-12" />
            <Button
              className="w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
              onClick={() => setIsLoggedIn(true)}
            >
              ƒêƒÉng Nh·∫≠p
            </Button>
            <div className="text-center">
              <Button variant="link">Qu√™n m·∫≠t kh·∫©u?</Button>
            </div>
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-white px-2 text-gray-500">Ho·∫∑c</span>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-3">
              <Button variant="outline" className="h-12 bg-transparent">
                <span className="mr-2">üìò</span>
                Facebook
              </Button>
              <Button variant="outline" className="h-12 bg-transparent">
                <span className="mr-2">üîç</span>
                Google
              </Button>
            </div>
            <div className="text-center">
              <p className="text-sm text-gray-600">
                Ch∆∞a c√≥ t√†i kho·∫£n?{" "}
                <Button variant="link" className="p-0 h-auto font-semibold text-blue-600">
                  ƒêƒÉng k√Ω ngay
                </Button>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )

  // Profile View
  const ProfileView = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 space-y-6">
        <div className="bg-white rounded-2xl p-6 shadow-sm">
          <div className="flex items-center space-x-4">
            <div className="w-20 h-20 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center">
              <User className="w-10 h-10 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">Nguy·ªÖn VƒÉn A</h1>
              <p className="text-gray-600">nguyenvana@email.com</p>
              <p className="text-sm text-gray-500">Th√†nh vi√™n t·ª´: 15/01/2024</p>
            </div>
          </div>
        </div>

        <Tabs defaultValue="orders" className="w-full">
          <TabsList className="grid w-full grid-cols-4 bg-white rounded-xl p-1">
            <TabsTrigger value="orders" className="rounded-lg">
              ƒê∆°n H√†ng
            </TabsTrigger>
            <TabsTrigger value="reviews" className="rounded-lg">
              ƒê√°nh Gi√°
            </TabsTrigger>
            <TabsTrigger value="favorites" className="rounded-lg">
              Y√™u Th√≠ch
            </TabsTrigger>
            <TabsTrigger value="settings" className="rounded-lg">
              C√†i ƒê·∫∑t
            </TabsTrigger>
          </TabsList>

          <TabsContent value="orders" className="space-y-4 mt-6">
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h2 className="text-xl font-semibold mb-4">ƒê∆°n H√†ng C·ªßa T√¥i</h2>
              {[1, 2, 3].map((order) => (
                <Card key={order} className="mb-4 border-0 shadow-sm">
                  <CardContent className="p-4">
                    <div className="flex justify-between items-center">
                      <div>
                        <p className="font-semibold">ƒê∆°n h√†ng #iPET{order}001</p>
                        <p className="text-sm text-gray-600">Ng√†y ƒë·∫∑t: 15/12/2024</p>
                        <p className="text-sm text-gray-600">T·ªïng ti·ªÅn: {(order * 500000).toLocaleString()}ƒë</p>
                      </div>
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
                        ƒêang giao
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="reviews" className="space-y-4 mt-6">
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h2 className="text-xl font-semibold mb-4">ƒê√°nh Gi√° C·ªßa T√¥i</h2>
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">‚≠ê</span>
                </div>
                <p className="text-gray-600">B·∫°n ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
                <Button className="mt-4 bg-transparent" variant="outline">
                  Kh√°m Ph√° S·∫£n Ph·∫©m
                </Button>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="favorites" className="space-y-4 mt-6">
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h2 className="text-xl font-semibold mb-4">S·∫£n Ph·∫©m Y√™u Th√≠ch</h2>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {products.slice(0, 3).map((product) => (
                  <Card
                    key={product.id}
                    className="cursor-pointer hover:shadow-lg transition-shadow border-0"
                    onClick={() => setSelectedProduct(product)}
                  >
                    <CardContent className="p-4">
                      <img
                        src={product.image || "/placeholder.svg"}
                        alt={product.name}
                        className="w-full h-32 object-cover rounded-lg mb-2"
                      />
                      <h3 className="font-semibold text-sm mb-1">{product.name}</h3>
                      <p className="text-red-600 font-bold">{product.price.toLocaleString()}ƒë</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="settings" className="space-y-4 mt-6">
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h2 className="text-xl font-semibold mb-4">C√†i ƒê·∫∑t T√†i Kho·∫£n</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">H·ªç v√† t√™n</label>
                  <Input placeholder="H·ªç v√† t√™n" defaultValue="Nguy·ªÖn VƒÉn A" className="h-12" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                  <Input placeholder="Email" defaultValue="nguyenvana@email.com" className="h-12" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">S·ªë ƒëi·ªán tho·∫°i</label>
                  <Input placeholder="S·ªë ƒëi·ªán tho·∫°i" defaultValue="0901234567" className="h-12" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">ƒê·ªãa ch·ªâ</label>
                  <Input placeholder="ƒê·ªãa ch·ªâ" defaultValue="123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM" className="h-12" />
                </div>
                <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                  C·∫≠p Nh·∫≠t Th√¥ng Tin
                </Button>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )

  // Forum View
  const ForumView = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 space-y-6">
        <div className="bg-white rounded-2xl p-6 shadow-sm">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-2xl font-bold">Di·ªÖn ƒê√†n H·ªèi ƒê√°p iPet</h1>
              <p className="text-gray-600">C·ªông ƒë·ªìng y√™u th√∫ c∆∞ng chia s·∫ª kinh nghi·ªám</p>
            </div>
            <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
              <Plus className="w-4 h-4 mr-2" />
              ƒê·∫∑t C√¢u H·ªèi
            </Button>
          </div>

          <div className="space-y-4">
            {[
              {
                title: "Ch√≥ c·ªßa t√¥i b·ªã ti√™u ch·∫£y, t√¥i n√™n l√†m g√¨?",
                author: "Nguy·ªÖn VƒÉn A",
                time: "2 gi·ªù tr∆∞·ªõc",
                answers: 5,
                views: 123,
                category: "S·ª©c Kh·ªèe",
                urgent: true,
              },
              {
                title: "Th·ª©c ƒÉn n√†o t·ªët nh·∫•t cho m√®o con 2 th√°ng tu·ªïi?",
                author: "Tr·∫ßn Th·ªã B",
                time: "4 gi·ªù tr∆∞·ªõc",
                answers: 8,
                views: 256,
                category: "Dinh D∆∞·ª°ng",
                urgent: false,
              },
              {
                title: "C√°ch hu·∫•n luy·ªán ch√≥ ƒëi v·ªá sinh ƒë√∫ng ch·ªó?",
                author: "L√™ VƒÉn C",
                time: "1 ng√†y tr∆∞·ªõc",
                answers: 12,
                views: 489,
                category: "Hu·∫•n Luy·ªán",
                urgent: false,
              },
            ].map((question, index) => (
              <Card key={index} className="hover:shadow-md transition-shadow cursor-pointer border-0">
                <CardContent className="p-6">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <span
                          className={`px-2 py-1 rounded-full text-xs font-medium ${
                            question.category === "S·ª©c Kh·ªèe"
                              ? "bg-red-100 text-red-800"
                              : question.category === "Dinh D∆∞·ª°ng"
                                ? "bg-green-100 text-green-800"
                                : "bg-blue-100 text-blue-800"
                          }`}
                        >
                          {question.category}
                        </span>
                        {question.urgent && (
                          <span className="px-2 py-1 bg-orange-100 text-orange-800 rounded-full text-xs font-medium">
                            Kh·∫©n C·∫•p
                          </span>
                        )}
                      </div>
                      <h3 className="font-semibold text-lg mb-2 hover:text-blue-600 transition-colors">
                        {question.title}
                      </h3>
                      <div className="flex items-center text-sm text-gray-600 space-x-4">
                        <span>B·ªüi {question.author}</span>
                        <span>{question.time}</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <div className="flex items-center space-x-4">
                      <span className="flex items-center">üí¨ {question.answers} tr·∫£ l·ªùi</span>
                      <span className="flex items-center">üëÅÔ∏è {question.views} l∆∞·ª£t xem</span>
                    </div>
                    <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-700">
                      Tr·∫£ l·ªùi ‚Üí
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  )

  // Cart View
  const CartView = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-2xl font-bold mb-6">Gi·ªè H√†ng C·ªßa T√¥i ({cartItems.length} s·∫£n ph·∫©m)</h1>

        {cartItems.length === 0 ? (
          <div className="bg-white rounded-2xl p-12 text-center shadow-sm">
            <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-4xl">üõí</span>
            </div>
            <h2 className="text-xl font-semibold mb-2">Gi·ªè h√†ng tr·ªëng</h2>
            <p className="text-gray-600 mb-6">H√£y th√™m s·∫£n ph·∫©m y√™u th√≠ch v√†o gi·ªè h√†ng!</p>
            <Button className="bg-gradient-to-r from-blue-600 to-purple-600" onClick={() => setCurrentView("products")}>
              Mua S·∫Øm Ngay
            </Button>
          </div>
        ) : (
          <div className="space-y-6">
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              {cartItems.map((item) => (
                <div key={item.id} className="flex items-center justify-between py-4 border-b last:border-b-0">
                  <div className="flex items-center space-x-4">
                    <img
                      src={item.image || "/placeholder.svg"}
                      alt={item.name}
                      className="w-16 h-16 object-cover rounded-lg"
                    />
                    <div>
                      <h3 className="font-semibold">{item.name}</h3>
                      <p className="text-gray-600">{item.seller}</p>
                      <p className="text-red-600 font-bold">{item.price.toLocaleString()}ƒë</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center border rounded-lg">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          if (item.quantity > 1) {
                            setCartItems(
                              cartItems.map((cartItem) =>
                                cartItem.id === item.id ? { ...cartItem, quantity: cartItem.quantity - 1 } : cartItem,
                              ),
                            )
                          }
                        }}
                      >
                        -
                      </Button>
                      <span className="px-4 py-2">{item.quantity}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setCartItems(
                            cartItems.map((cartItem) =>
                              cartItem.id === item.id ? { ...cartItem, quantity: cartItem.quantity + 1 } : cartItem,
                            ),
                          )
                        }}
                      >
                        +
                      </Button>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-red-600"
                      onClick={() => {
                        setCartItems(cartItems.filter((cartItem) => cartItem.id !== item.id))
                      }}
                    >
                      X√≥a
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <div className="flex justify-between items-center mb-4">
                <span className="text-lg font-semibold">T·ªïng c·ªông:</span>
                <span className="text-2xl font-bold text-red-600">
                  {cartItems.reduce((total, item) => total + item.price * item.quantity, 0).toLocaleString()}ƒë
                </span>
              </div>
              <Button className="w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600">Thanh To√°n</Button>
            </div>
          </div>
        )}
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      <Header
        currentView={currentView}
        setCurrentView={setCurrentView}
        isLoggedIn={isLoggedIn}
        cartItems={cartItems}
        categories={categories}
        onSearch={handleSearch}
        onCategoryFilter={handleCategoryFilter}
      />

      <main className="min-h-screen">
        {currentView === "home" && (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <HomeView
              categories={categories}
              products={products}
              stores={stores}
              setCurrentView={setCurrentView}
              onProductClick={setSelectedProduct}
              onStoreClick={setSelectedStore}
              onAddToCart={handleAddToCart}
              onAddToWishlist={handleAddToWishlist}
              onCategoryFilter={handleCategoryFilter}
            />
          </div>
        )}
        {currentView === "products" && (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <ProductsView
              products={filteredProducts}
              viewMode={viewMode}
              setViewMode={setViewMode}
              onProductClick={setSelectedProduct}
              onAddToCart={handleAddToCart}
              onAddToWishlist={handleAddToWishlist}
              searchQuery={searchQuery}
              selectedCategory={selectedCategory}
            />
          </div>
        )}
        {currentView === "stores" && (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <StoresView stores={stores} onStoreClick={setSelectedStore} />
          </div>
        )}
        {currentView === "login" && <LoginView />}
        {currentView === "profile" && isLoggedIn && <ProfileView />}
        {currentView === "forum" && <ForumView />}
        {currentView === "cart" && <CartView />}
      </main>

      <Footer />

      {/* Modals */}
      <ProductDetailModal
        product={selectedProduct}
        onClose={() => setSelectedProduct(null)}
        handleAddToCart={handleAddToCart}
        handleAddToWishlist={handleAddToWishlist}
      />
      <StoreDetailModal store={selectedStore} onClose={() => setSelectedStore(null)} />

      {/* AI Chatbot */}
      <ChatBot />

      {/* Bottom Navigation for Mobile */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 md:hidden z-40">
        <div className="flex justify-around py-2">
          <Button variant="ghost" size="sm" onClick={() => setCurrentView("home")}>
            <div className="text-center">
              <div className="text-2xl">üè†</div>
              <div className="text-xs">Trang Ch·ªß</div>
            </div>
          </Button>
          <Button variant="ghost" size="sm" onClick={() => setCurrentView("products")}>
            <div className="text-center">
              <div className="text-2xl">üõçÔ∏è</div>
              <div className="text-xs">S·∫£n Ph·∫©m</div>
            </div>
          </Button>
          <Button variant="ghost" size="sm" onClick={() => setCurrentView("stores")}>
            <div className="text-center">
              <div className="text-2xl">üè™</div>
              <div className="text-xs">C·ª≠a H√†ng</div>
            </div>
          </Button>
          <Button variant="ghost" size="sm" onClick={() => setCurrentView("forum")}>
            <div className="text-center">
              <div className="text-2xl">üí¨</div>
              <div className="text-xs">Di·ªÖn ƒê√†n</div>
            </div>
          </Button>
          <Button variant="ghost" size="sm" onClick={() => setCurrentView(isLoggedIn ? "profile" : "login")}>
            <div className="text-center">
              <div className="text-2xl">üë§</div>
              <div className="text-xs">T√†i Kho·∫£n</div>
            </div>
          </Button>
        </div>
      </div>
    </div>
  )
}
